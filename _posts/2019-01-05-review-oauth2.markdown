---
layout: post
title:  "OAuth2 정리"
date:   2019-01-05 00:18:23 +0700
categories: [oauth2]
---
# 배경
* SaaS(Software as a Service) 등장
 - Twitter, FaceBook, Google 과 같은 거대 IT 기업들은 자신의 플랫폼에서 제공하는 서비스를 다른 소프트웨어에서도 사용할 수 있도록 오픈했다.
 - 그래서 어플리케이션들이 해당 서비스를 이용해서, 사용자들의 정보를 활용하거나 어플리케이션이ㅡ 
* 보안 이슈
- ID / PW 
* 
- 새로운 형태의 서비스 제공 방식의 출현으로 인해 어플리케이션이 사용자에게 서비스를 제공해주는 방식이 많이 바꼈다.
- SaaS가 어플리케이션 서비스 방식의 대세로 자리매김을 하면서, 서비스 제공자에 자신을 인증하는 방식의 표준이 필요하게 됬다.
- 어플리케이션이 사용자와 서비스 제공자를 연결해주고, 서비스 제공자는 사용자에게 권한을 허락할 것인지 의사를 확인한다 
- 사용자가 허락하면, 서비스 제공자는 어플리케이션에게 서비스 제공자의 서비스에 접근을 할 수 있는 접근 토큰(방문증)을 발급한다.
- 어플리케이션은 그 뒤로 접근 토큰을 사용해서, 서비스 제공자의 서비스를 정해진 권한 범위내에서 사용할 수 있게 된다.  
- SaaS(Software as a Service) 
- 플랫폼화된 서비스의 등장으로 인해, 어플리케이션이 제공하는 서비스는 플랫폼과 연동하게 됨.
- 예를 들면, 달리기 앱을 통해서 성취한 것을 플랫폼에 공유 할 수 있음. 
- 혹은 플랫폼에 등록된 나의 계정 정보를 통해서 서비스를 제공. 
- 
- 기존 인증 방식의 문제점.
  - 기존에는 API Key 방식으로 인증을 했음. 토큰 방식이 없었을 경우, 직접 ID / PW 를 노출해야됨. 안전하지 못함. 토큰을 들고 있게됨. 
- 인증과 권한의 차이.
- JWT 토큰을 사용한 Session 제거.   
## 용어정리 
- Resource Owner 
- Resource Server
- Client
- Authorization Server 
## Grant Type 
* Authorization Code
* Client Credential
* Password
* Implicit 
* Password

## 결론

